/* Generated By:JJTree&JavaCC: Do not edit this line. Compiler.java */
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Scanner;
public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants, CompilerConstants {/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();/** Main entry point. */
    public static void main(String args[]) {
        try {
            String fileName=args[args.length - 1];
            DeleteComments deleteComments = new DeleteComments();
            String input = deleteComments.clearComment(fileName);
            getStringStream inputs = new getStringStream();
            InputStream inputstream = inputs.getStringStream2(input);
            Compiler t = new Compiler(inputstream);
            try {
                SimpleNode n = t.Start();
                n.dump("");
                System.out.println("Over");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        } catch (Exception e) {
                                        System.out.println( "\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728!");
        }
    }

/** 程序入口.
 * 实现全局变量的定义
 * 自定义函数的定义
 * 主函数
 */
  static final public SimpleNode Start() throws ParseException {
                     /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (jj_2_1(3)) {
          ;
        } else {
          break label_1;
        }
        VariableDefinition();
        jj_consume_token(SEMICOLON_TOKEN);
      }
      label_2:
      while (true) {
        if (jj_2_2(3)) {
          ;
        } else {
          break label_2;
        }
        FunctionDefinition();
      }
      MainFunction();
      label_3:
      while (true) {
        if (jj_2_3(3)) {
          ;
        } else {
          break label_3;
        }
        VariableDefinition();
        jj_consume_token(SEMICOLON_TOKEN);
      }
      label_4:
      while (true) {
        if (jj_2_4(3)) {
          ;
        } else {
          break label_4;
        }
        FunctionDefinition();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** 变量定义部分. */
  static final public void VariableDefinition() throws ParseException {
                            /*@bgen(jjtree) VariableDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST_TOKEN:
        jj_consume_token(CONST_TOKEN);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(INT_TOKEN);
      jj_consume_token(ID_TOKEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_TOKEN:
        jj_consume_token(EQUAL_TOKEN);
        Choice();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TOKEN:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA_TOKEN);
        jj_consume_token(ID_TOKEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL_TOKEN:
          jj_consume_token(EQUAL_TOKEN);
          Choice();
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 自定义函数定义部分. */
  static final public void FunctionDefinition() throws ParseException {
                            /*@bgen(jjtree) FunctionDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TOKEN:
        jj_consume_token(INT_TOKEN);
        jj_consume_token(ID_TOKEN);
        break;
      case VOID_TOKEN:
        jj_consume_token(VOID_TOKEN);
        jj_consume_token(ID_TOKEN);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN_TOKEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TOKEN:
        ParaDefinition();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN_TOKEN);
      PartProgram();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 函数变量定义部分. */
  static final public void ParaDefinition() throws ParseException {
                        /*@bgen(jjtree) ParaDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTPARADEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT_TOKEN);
      jj_consume_token(ID_TOKEN);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TOKEN:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA_TOKEN);
        jj_consume_token(INT_TOKEN);
        jj_consume_token(ID_TOKEN);
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 主函数部分 */
  static final public void MainFunction() throws ParseException {
                      /*@bgen(jjtree) MainFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN_TOKEN);
      jj_consume_token(LPAREN_TOKEN);
      jj_consume_token(RPAREN_TOKEN);
      PartProgram();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/**
 * 分程序部分
 * 如果分程序为void且没有返回值，则自动补上返回值（退栈语句）
 */
  static final public void PartProgram() throws ParseException {
                    /*@bgen(jjtree) PartProgram */
  SimpleNode jjtn000 = new SimpleNode(JJTPARTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE_TOKEN);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF_TOKEN:
        case CONST_TOKEN:
        case INT_TOKEN:
        case WHILE_TOKEN:
        case FOR_TOKEN:
        case PRINTF_TOKEN:
        case RETURN_TOKEN:
        case ID_TOKEN:
        case SEMICOLON_TOKEN:
        case LBRACE_TOKEN:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        Word();
      }
      jj_consume_token(RBRACE_TOKEN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 语句 */
  static final public void Word() throws ParseException {
 /*@bgen(jjtree) Word */
  SimpleNode jjtn000 = new SimpleNode(JJTWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_TOKEN:
        If_Word();
        break;
      case WHILE_TOKEN:
      case FOR_TOKEN:
        For_Word();
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_5(2)) {
          jj_consume_token(LBRACE_TOKEN);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF_TOKEN:
            case CONST_TOKEN:
            case INT_TOKEN:
            case WHILE_TOKEN:
            case FOR_TOKEN:
            case PRINTF_TOKEN:
            case RETURN_TOKEN:
            case ID_TOKEN:
            case SEMICOLON_TOKEN:
            case LBRACE_TOKEN:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_8;
            }
            Word();
          }
          jj_consume_token(RBRACE_TOKEN);
        } else if (jj_2_6(2)) {
          DefinitionFunction();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID_TOKEN:
            Equals_Word();
            break;
          case RETURN_TOKEN:
            Return_Word();
            break;
          case PRINTF_TOKEN:
            WriteWord();
            break;
          case CONST_TOKEN:
          case INT_TOKEN:
            VariableDefinition();
            jj_consume_token(SEMICOLON_TOKEN);
            break;
          case SEMICOLON_TOKEN:
            jj_consume_token(SEMICOLON_TOKEN);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 条件语句 */
  static final public void If_Word() throws ParseException {
                /*@bgen(jjtree) If_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF_TOKEN);
      jj_consume_token(LPAREN_TOKEN);
      Expression();
      jj_consume_token(RPAREN_TOKEN);
      Word();
      if (jj_2_7(2)) {
        jj_consume_token(ELSE_TOKEN);
        Word();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 循环语句 */
  static final public void For_Word() throws ParseException {
                 /*@bgen(jjtree) For_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE_TOKEN:
        jj_consume_token(WHILE_TOKEN);
        jj_consume_token(LPAREN_TOKEN);
        Expression();
        jj_consume_token(RPAREN_TOKEN);
        Word();
        break;
      case FOR_TOKEN:
        jj_consume_token(FOR_TOKEN);
        jj_consume_token(LPAREN_TOKEN);
        Equals_Word();
        Expression();
        jj_consume_token(SEMICOLON_TOKEN);
        Equals_Word2();
        jj_consume_token(RPAREN_TOKEN);
        Word();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 赋值语句 */
  static final public void Equals_Word() throws ParseException {
                    /*@bgen(jjtree) Equals_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID_TOKEN);
      jj_consume_token(EQUAL_TOKEN);
      Choice();
      jj_consume_token(SEMICOLON_TOKEN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Choice() throws ParseException {
               /*@bgen(jjtree) Choice */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_TOKEN:
      case NUM_TOKEN:
      case PLUS_TOKEN:
      case MINUS_TOKEN:
      case NOT_TOKEN:
      case LPAREN_TOKEN:
        Expression();
        break;
      case READ_TOKEN:
        jj_consume_token(READ_TOKEN);
        jj_consume_token(LPAREN_TOKEN);
        jj_consume_token(RPAREN_TOKEN);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 赋值语句 */
  static final public void Equals_Word2() throws ParseException {
                     /*@bgen(jjtree) Equals_Word2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_WORD2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID_TOKEN);
      jj_consume_token(EQUAL_TOKEN);
      Expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 返回语句 */
  static final public void Return_Word() throws ParseException {
                    /*@bgen(jjtree) Return_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN_TOKEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_TOKEN:
      case NUM_TOKEN:
      case PLUS_TOKEN:
      case MINUS_TOKEN:
      case NOT_TOKEN:
      case LPAREN_TOKEN:
        Expression();

        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON_TOKEN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 写语句 */
  static final public void WriteWord() throws ParseException {
                  /*@bgen(jjtree) WriteWord */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITEWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINTF_TOKEN);
      jj_consume_token(LPAREN_TOKEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_TOKEN:
      case NUM_TOKEN:
      case PLUS_TOKEN:
      case MINUS_TOKEN:
      case NOT_TOKEN:
      case LPAREN_TOKEN:
        Expression();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN_TOKEN);
      jj_consume_token(SEMICOLON_TOKEN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {
                    /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      logic_and();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
        jj_consume_token(OR);
        logic_and();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//逻辑与
  static final public void logic_and() throws ParseException {
                  /*@bgen(jjtree) logic_and */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      equality();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(AND);
        equality();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//逻辑等与不等
  static final public void equality() throws ParseException {
                 /*@bgen(jjtree) equality */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      comparison();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case YESDY:
        case NOTDY:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case YESDY:
          jj_consume_token(YESDY);
          break;
        case NOTDY:
          jj_consume_token(NOTDY);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        comparison();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//逻辑判断 : 优先级低于加减
  static final public void comparison() throws ParseException {
                   /*@bgen(jjtree) comparison */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      add();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XY:
        case XYDY:
        case DY:
        case DYDY:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XY:
          jj_consume_token(XY);
          break;
        case XYDY:
          jj_consume_token(XYDY);
          break;
        case DY:
          jj_consume_token(DY);
          break;
        case DYDY:
          jj_consume_token(DYDY);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        add();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 表达式 */
  static final public void add() throws ParseException {
            /*@bgen(jjtree) add */
  SimpleNode jjtn000 = new SimpleNode(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_TOKEN:
      case MINUS_TOKEN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_TOKEN:
          jj_consume_token(PLUS_TOKEN);
          break;
        case MINUS_TOKEN:
          jj_consume_token(MINUS_TOKEN);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      Term();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_TOKEN:
        case MINUS_TOKEN:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_TOKEN:
          jj_consume_token(PLUS_TOKEN);
          break;
        case MINUS_TOKEN:
          jj_consume_token(MINUS_TOKEN);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Term();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 项 */
  static final public void Term() throws ParseException {
             /*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NotOrNeg();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES_TOKEN:
        case MOD:
        case DIVIDE_TOKEN:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES_TOKEN:
          jj_consume_token(TIMES_TOKEN);
          break;
        case DIVIDE_TOKEN:
          jj_consume_token(DIVIDE_TOKEN);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        NotOrNeg();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void NotOrNeg() throws ParseException {
                 /*@bgen(jjtree) NotOrNeg */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTORNEG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS_TOKEN:
      case NOT_TOKEN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT_TOKEN:
          jj_consume_token(NOT_TOKEN);
          break;
        case MINUS_TOKEN:
          jj_consume_token(MINUS_TOKEN);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      Factor();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 因子 */
  static final public void Factor() throws ParseException {
               /*@bgen(jjtree) Factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        DefinitionFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN_TOKEN:
          jj_consume_token(LPAREN_TOKEN);
          Expression();
          jj_consume_token(RPAREN_TOKEN);
          break;
        case NUM_TOKEN:
          jj_consume_token(NUM_TOKEN);
          break;
        default:
          jj_la1[29] = jj_gen;
          if (jj_2_9(2)) {
            jj_consume_token(ID_TOKEN);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 自定义函数调用 */
  static final public void DefinitionFunction() throws ParseException {
                           /*@bgen(jjtree) DefinitionFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINITIONFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID_TOKEN);
      jj_consume_token(LPAREN_TOKEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID_TOKEN:
      case NUM_TOKEN:
      case PLUS_TOKEN:
      case MINUS_TOKEN:
      case NOT_TOKEN:
      case LPAREN_TOKEN:
        loadValue();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN_TOKEN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/** 函数调用值 */
  static final public void loadValue() throws ParseException {
                  /*@bgen(jjtree) loadValue */
  SimpleNode jjtn000 = new SimpleNode(JJTLOADVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA_TOKEN:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA_TOKEN);
        Expression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(SEMICOLON_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ID_TOKEN)) return true;
    if (jj_scan_token(LPAREN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(FOR_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(WHILE_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ELSE_TOKEN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(IF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(PRINTF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(VOID_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(RETURN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(INT_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    if (jj_scan_token(LPAREN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(COMMA_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(EQUAL_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(LBRACE_TOKEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) jj_scanpos = xsp;
    if (jj_scan_token(INT_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(SEMICOLON_TOKEN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x40000000,0x400000,0x40000000,0x1800,0x800,0x400000,0x809d8e00,0x809d8e00,0x18200,0x9c0c00,0x18000,0x7320000,0x7300000,0x7300000,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x3000000,0x3000000,0x3000000,0x38000000,0x38000000,0x6000000,0x6000000,0x200000,0x7300000,0x400000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x8,0x10,0x600,0x600,0x1e0,0x1e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
