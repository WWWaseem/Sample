/* Generated By:JavaCC: Do not edit this line. Parse.java */
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.*;
import java.io.FileNotFoundException;
public class Parse implements ParseConstants {
        public static ArrayList < TypeNode > typeNodes = new ArrayList();
        public static String[] tokens={"int","return","void","while","if","main","else","write","read","for","{","}",";",",","num","var","(",")","[","]","!","*","/","%"
        ,"+","-","<","<=",">",">=","==","!=","&&","||","="};
        public static HashMap<String,Integer> hashMap = new HashMap();
        private static String outPath = "";
        /** Main entry point. */
        public static void main(String args[]) throws ParseException {
                //将种别码放入Hsah表
                for(int i=0;i<tokens.length;i++)
                {
                    hashMap.put(tokens[i],i);
                }
                        String s = "";
                        try{
                            s=args[args.length - 1];
                        }catch (Exception e){
                            return;
                        }
                        DeleteComments deleteComments = new DeleteComments();
                        String inputstr = deleteComments.clearComment(s);
            getStringStream inputs = new getStringStream();
            InputStream inputstream = inputs.getStringStream2(inputstr);
                        Parse compiler = new Parse(inputstream);
                        try {
                                String result = "";
                                outPath = "src/mixed/test99.txt";
                                compiler.start();
                                for(int i=0;i<typeNodes.size();i++)
                {
                    System.out.println(typeNodes.get(i).toOutString());
                }
                        } catch (ParseException e) {
                                System.err.println(e);
                        }
        }

/** 程序入口.
 * 匹配所有token,并存储Typenode
 */
  static final public void start() throws ParseException {
    Token t;
    String tt = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_TOKEN:
      case INT_TOKEN:
      case VOID_TOKEN:
      case ELSE_TOKEN:
      case MAIN_TOKEN:
      case WHILE_TOKEN:
      case FOR_TOKEN:
      case READ_TOKEN:
      case PRINTF_TOKEN:
      case RETURN_TOKEN:
      case ID_TOKEN:
      case NUM_TOKEN:
      case COMMA_TOKEN:
      case SEMICOLON_TOKEN:
      case PLUS_TOKEN:
      case MINUS_TOKEN:
      case TIMES_TOKEN:
      case MOD:
      case DIVIDE_TOKEN:
      case EQUAL_TOKEN:
      case LBRACE_TOKEN:
      case RBRACE_TOKEN:
      case LPAREN_TOKEN:
      case RPAREN_TOKEN:
      case OR:
      case AND:
      case XY:
      case XYDY:
      case DY:
      case DYDY:
      case YESDY:
      case NOTDY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_TOKEN:
      case INT_TOKEN:
      case VOID_TOKEN:
      case ELSE_TOKEN:
      case MAIN_TOKEN:
      case WHILE_TOKEN:
      case FOR_TOKEN:
      case READ_TOKEN:
      case PRINTF_TOKEN:
      case RETURN_TOKEN:
      case COMMA_TOKEN:
      case SEMICOLON_TOKEN:
      case PLUS_TOKEN:
      case MINUS_TOKEN:
      case TIMES_TOKEN:
      case MOD:
      case DIVIDE_TOKEN:
      case EQUAL_TOKEN:
      case LBRACE_TOKEN:
      case RBRACE_TOKEN:
      case LPAREN_TOKEN:
      case RPAREN_TOKEN:
      case OR:
      case AND:
      case XY:
      case XYDY:
      case DY:
      case DYDY:
      case YESDY:
      case NOTDY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF_TOKEN:
          t = jj_consume_token(IF_TOKEN);
          break;
        case WHILE_TOKEN:
          t = jj_consume_token(WHILE_TOKEN);
          break;
        case INT_TOKEN:
          t = jj_consume_token(INT_TOKEN);
          break;
        case VOID_TOKEN:
          t = jj_consume_token(VOID_TOKEN);
          break;
        case ELSE_TOKEN:
          t = jj_consume_token(ELSE_TOKEN);
          break;
        case MAIN_TOKEN:
          t = jj_consume_token(MAIN_TOKEN);
          break;
        case FOR_TOKEN:
          t = jj_consume_token(FOR_TOKEN);
          break;
        case READ_TOKEN:
          t = jj_consume_token(READ_TOKEN);
          break;
        case PRINTF_TOKEN:
          t = jj_consume_token(PRINTF_TOKEN);
          break;
        case RETURN_TOKEN:
          t = jj_consume_token(RETURN_TOKEN);
          break;
        case COMMA_TOKEN:
          t = jj_consume_token(COMMA_TOKEN);
          break;
        case SEMICOLON_TOKEN:
          t = jj_consume_token(SEMICOLON_TOKEN);
          break;
        case PLUS_TOKEN:
          t = jj_consume_token(PLUS_TOKEN);
          break;
        case MINUS_TOKEN:
          t = jj_consume_token(MINUS_TOKEN);
          break;
        case TIMES_TOKEN:
          t = jj_consume_token(TIMES_TOKEN);
          break;
        case MOD:
          t = jj_consume_token(MOD);
          break;
        case DIVIDE_TOKEN:
          t = jj_consume_token(DIVIDE_TOKEN);
          break;
        case EQUAL_TOKEN:
          t = jj_consume_token(EQUAL_TOKEN);
          break;
        case LBRACE_TOKEN:
          t = jj_consume_token(LBRACE_TOKEN);
          break;
        case RBRACE_TOKEN:
          t = jj_consume_token(RBRACE_TOKEN);
          break;
        case LPAREN_TOKEN:
          t = jj_consume_token(LPAREN_TOKEN);
          break;
        case RPAREN_TOKEN:
          t = jj_consume_token(RPAREN_TOKEN);
          break;
        case OR:
          t = jj_consume_token(OR);
          break;
        case AND:
          t = jj_consume_token(AND);
          break;
        case XY:
          t = jj_consume_token(XY);
          break;
        case XYDY:
          t = jj_consume_token(XYDY);
          break;
        case DY:
          t = jj_consume_token(DY);
          break;
        case DYDY:
          t = jj_consume_token(DYDY);
          break;
        case YESDY:
          t = jj_consume_token(YESDY);
          break;
        case NOTDY:
          t = jj_consume_token(NOTDY);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tt = t.image;
        switch (tt){
            //{"int","return","void","while","if","else","for","{","}",";",",","num","var","(",")","[","]","!","*","/","%","+","-","<","<=",">",">=","==","!=","&&","||","="}
            case "int":     typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "return":  typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "void":    typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "while":   typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "main" :   typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "read":    typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "write":   typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "if":      typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "else":    typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "for":     typeNodes.add(new TypeNode(MyTypeName.Keyword,t.image,hashMap.get(t.image)));break;
            case "{":       typeNodes.add(new TypeNode(MyTypeName.Edge,t.image,hashMap.get(t.image)));break;
            case "}":       typeNodes.add(new TypeNode(MyTypeName.Edge,t.image,hashMap.get(t.image)));break;
            case ";":       typeNodes.add(new TypeNode(MyTypeName.Edge,t.image,hashMap.get(t.image)));break;
            case ",":       typeNodes.add(new TypeNode(MyTypeName.Edge,t.image,hashMap.get(t.image)));break;
            case "(":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case ")":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "[":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "]":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case"!":        typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "*":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "/":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "%":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "+":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "-":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "<":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "<=":      typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case ">":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case ">=":      typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "==":      typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "!=":      typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "&&":      typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "||":      typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            case "=":       typeNodes.add(new TypeNode(MyTypeName.Ope,t.image,hashMap.get(t.image)));break;
            default:break;
        }
        break;
      case ID_TOKEN:
        t = jj_consume_token(ID_TOKEN);
        typeNodes.add(new TypeNode(MyTypeName.ID,t.image,hashMap.get("var")));
        break;
      case NUM_TOKEN:
        t = jj_consume_token(NUM_TOKEN);
        typeNodes.add(new TypeNode(MyTypeName.ID,t.image,hashMap.get("num")));
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff80,0xfff9ff80,0xffffff80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7f,0x7f,0x7f,};
   }

  /** Constructor with InputStream. */
  public Parse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parse(ParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
