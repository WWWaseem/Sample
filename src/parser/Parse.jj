/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Parse.jj */
/*@egen*/options {
    UNICODE_INPUT = true;
    JDK_VERSION = "1.8";
}
PARSER_BEGIN(Compiler)
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Scanner;
public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
    /** Main entry point. */
    public static void main(String args[]) {
        try {
            String fileName=args[args.length - 1];
            DeleteComments deleteComments = new DeleteComments();
            String input = deleteComments.clearComment(fileName);
            getStringStream inputs = new getStringStream();
            InputStream inputstream = inputs.getStringStream2(input);
            Compiler t = new Compiler(inputstream);
            try {
                SimpleNode n = t.Start();
                n.dump("");
                System.out.println("Over");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        } catch (Exception e) {
                			System.out.println( "\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728!");
        }
    }
  }
PARSER_END(Compiler)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|  <"//" (~["\r", "\n"])*>
|   "/*" : COMMENTS
}

 <COMMENTS> SKIP :
 {
   "*/" : DEFAULT
 | < ~[] >
 }

/** TOKEN\u5b9a\u4e49 */
TOKEN: {
		<IF_TOKEN: "if" >
		|
        <CONST_TOKEN: "const" >
		|
		<INT_TOKEN: "int" >
		|
		<VOID_TOKEN: "void" >
		|
		<ELSE_TOKEN: "else" >
		|
		<MAIN_TOKEN: "main" >
		|
		<
		WHILE_TOKEN: "while" >
		|
		<FOR_TOKEN: "for" >
		|
		<READ_TOKEN: "read" >
		|
		<PRINTF_TOKEN: "write" >
		|
		<RETURN_TOKEN: "return" >
		|
		<ID_TOKEN: ["a" - "z", "A" - "Z", "_"](["a" - "z", "A" - "Z", "_", "0" - "9"]) * >
		|
		<
		NUM_TOKEN: (["0" - "9"]) + >
		|
		<COMMA_TOKEN: "," >
		|
		<SEMICOLON_TOKEN: ";" >
		|
		<PLUS_TOKEN: "+" >
		|
		<MINUS_TOKEN: "-" >
		|
		<NOT_TOKEN: "!" >
        |
		<TIMES_TOKEN: "*" >
		|
		<MOD: "%" >
		|
		<DIVIDE_TOKEN: "/" >
		|
		<EQUAL_TOKEN: "=" >
		|
		<LBRACE_TOKEN: "{" >
		|
		<RBRACE_TOKEN: "}" >
		|
		<LPAREN_TOKEN: "(" >
		|
		<RPAREN_TOKEN: ")" >
		|
		< OR: "||" >
		|
		< AND: "&&" >
		|
		< XY: "<" >
		|
		< XYDY: "<=" >
		|
		< DY: ">" >
		|
		< DYDY: ">=" >
		|
		< YESDY: "==" >
		|
		< NOTDY: "!=" >
}
/** \u7a0b\u5e8f\u5165\u53e3.
 * \u5b9e\u73b0\u5168\u5c40\u53d8\u91cf\u7684\u5b9a\u4e49
 * \u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u5b9a\u4e49
 * \u4e3b\u51fd\u6570
 */
SimpleNode Start(): {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Start */
        try {
/*@egen*/
	//[<\u53d8\u91cf\u5b9a\u4e49\u90e8\u5206>] {<\u81ea\u5b9a\u4e49\u51fd\u6570\u5b9a\u4e49\u90e8\u5206>} <\u4e3b\u51fd\u6570>
	(LOOKAHEAD(3) VariableDefinition() < SEMICOLON_TOKEN > ) *
	(LOOKAHEAD(3) FunctionDefinition()) *
	MainFunction()
    (LOOKAHEAD(3) VariableDefinition() < SEMICOLON_TOKEN > ) *
    (LOOKAHEAD(3) FunctionDefinition()) */*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** \u53d8\u91cf\u5b9a\u4e49\u90e8\u5206. */
void VariableDefinition(): {/*@bgen(jjtree) VariableDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) VariableDefinition */
    try {
/*@egen*/
    (<CONST_TOKEN>)?<INT_TOKEN><ID_TOKEN>
    (<EQUAL_TOKEN> Choice())?
    ( <COMMA_TOKEN> <ID_TOKEN> (<EQUAL_TOKEN> Choice() )? )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/** \u81ea\u5b9a\u4e49\u51fd\u6570\u5b9a\u4e49\u90e8\u5206. */
void FunctionDefinition() :{/*@bgen(jjtree) FunctionDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDefinition */
    try {
/*@egen*/
    (<INT_TOKEN>
    <ID_TOKEN>
    |
     <VOID_TOKEN>
    <ID_TOKEN>)
    <LPAREN_TOKEN> (ParaDefinition())?<RPAREN_TOKEN>
    PartProgram()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/** \u51fd\u6570\u53d8\u91cf\u5b9a\u4e49\u90e8\u5206. */
void ParaDefinition() :{/*@bgen(jjtree) ParaDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTPARADEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParaDefinition */
    try {
/*@egen*/
    <INT_TOKEN>  <ID_TOKEN>
    (<COMMA_TOKEN> <INT_TOKEN>  <ID_TOKEN>)*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/** \u4e3b\u51fd\u6570\u90e8\u5206 */
void MainFunction() :{/*@bgen(jjtree) MainFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MainFunction */
    try {
/*@egen*/
    <MAIN_TOKEN> <LPAREN_TOKEN> <RPAREN_TOKEN>
    PartProgram()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * \u5206\u7a0b\u5e8f\u90e8\u5206
 * \u5982\u679c\u5206\u7a0b\u5e8f\u4e3avoid\u4e14\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u5219\u81ea\u52a8\u8865\u4e0a\u8fd4\u56de\u503c\uff08\u9000\u6808\u8bed\u53e5\uff09
 */
void PartProgram():{/*@bgen(jjtree) PartProgram */
  SimpleNode jjtn000 = new SimpleNode(JJTPARTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PartProgram */
    try {
/*@egen*/
    <LBRACE_TOKEN>
    (Word())*
    <RBRACE_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u8bed\u53e5 */
void Word():
{/*@bgen(jjtree) Word */
  SimpleNode jjtn000 = new SimpleNode(JJTWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Word */
    try {
/*@egen*/
    //<\u6761\u4ef6\u8bed\u53e5>\uff5c<\u5faa\u73af\u8bed\u53e5> | '{'<\u8bed\u53e5\u5e8f\u5217>'}' | <\u81ea\u5b9a\u4e49\u51fd\u6570\u8c03\u7528\u8bed\u53e5> |
    //<\u8d4b\u503c\u8bed\u53e5> | <\u8fd4\u56de\u8bed\u53e5> | <\u8bfb\u8bed\u53e5> | <\u5199\u8bed\u53e5> | ;
    If_Word()
    |
    For_Word()
    |
    LOOKAHEAD(2)<LBRACE_TOKEN> (Word())* <RBRACE_TOKEN>
    |
    LOOKAHEAD(2)DefinitionFunction()
    |
    Equals_Word()
    |
    Return_Word()
    |
    WriteWord()
    |
    VariableDefinition() <SEMICOLON_TOKEN>
    |
    <SEMICOLON_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u6761\u4ef6\u8bed\u53e5 */
void If_Word():{/*@bgen(jjtree) If_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If_Word */
    try {
/*@egen*/
    //if '('<\u8868\u8fbe\u5f0f>')' <\u8bed\u53e5> [else <\u8bed\u53e5> ]
    <IF_TOKEN> <LPAREN_TOKEN>Expression()<RPAREN_TOKEN>
    Word()
    [LOOKAHEAD(2)<ELSE_TOKEN> Word()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u5faa\u73af\u8bed\u53e5 */
void For_Word():{/*@bgen(jjtree) For_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) For_Word */
    try {
/*@egen*/
    //while '(' <\u8868\u8fbe\u5f0f>')' <\u8bed\u53e5>
    ( <WHILE_TOKEN><LPAREN_TOKEN> Expression()<RPAREN_TOKEN> Word())
    |(<FOR_TOKEN><LPAREN_TOKEN>(Equals_Word())Expression()<SEMICOLON_TOKEN>(Equals_Word2())<RPAREN_TOKEN>Word())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u8d4b\u503c\u8bed\u53e5 */
void Equals_Word():{/*@bgen(jjtree) Equals_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equals_Word */
    try {
/*@egen*/
    //id = <\u8868\u8fbe\u5f0f>;
    <ID_TOKEN> <EQUAL_TOKEN>Choice()<SEMICOLON_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Choice():{/*@bgen(jjtree) Choice */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Choice */
    try {
/*@egen*/
    Expression()
    |
    <READ_TOKEN> <LPAREN_TOKEN>  <RPAREN_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/** \u8d4b\u503c\u8bed\u53e5 */
void Equals_Word2():{/*@bgen(jjtree) Equals_Word2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_WORD2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equals_Word2 */
    try {
/*@egen*/
    //id = <\u8868\u8fbe\u5f0f>;
    <ID_TOKEN> <EQUAL_TOKEN> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u8fd4\u56de\u8bed\u53e5 */
void Return_Word():{/*@bgen(jjtree) Return_Word */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_WORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return_Word */
    try {
/*@egen*/
    //return ['(' <\u8868\u8fbe\u5f0f> ')'] ;
    <RETURN_TOKEN> [ Expression() {} ] <SEMICOLON_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u5199\u8bed\u53e5 */
void WriteWord():{/*@bgen(jjtree) WriteWord */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITEWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WriteWord */
    try {
/*@egen*/
    // printf '(' [ <\u8868\u8fbe\u5f0f>] ')';
    <PRINTF_TOKEN> <LPAREN_TOKEN> [Expression()] <RPAREN_TOKEN> <SEMICOLON_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression() :{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  logic_and()(  <OR> logic_and() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u903b\u8f91\u4e0e
void logic_and():{/*@bgen(jjtree) logic_and */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logic_and */
    try {
/*@egen*/
    equality()( <AND> equality() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//\u903b\u8f91\u7b49\u4e0e\u4e0d\u7b49
void equality():{/*@bgen(jjtree) equality */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) equality */
    try {
/*@egen*/
    comparison() ( (<YESDY>|<NOTDY>)comparison() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}
//\u903b\u8f91\u5224\u65ad : \u4f18\u5148\u7ea7\u4f4e\u4e8e\u52a0\u51cf
void comparison():{/*@bgen(jjtree) comparison */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comparison */
    try {
/*@egen*/
    add()( (<XY>|<XYDY>|<DY>|<DYDY>)add() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/** \u8868\u8fbe\u5f0f */
void add():{/*@bgen(jjtree) add */
  SimpleNode jjtn000 = new SimpleNode(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) add */
    try {
/*@egen*/
    //[+\uff5c-] <\u9879> { (+\uff5c-) <\u9879>}
    [<PLUS_TOKEN> | <MINUS_TOKEN> ] Term() ( ( <PLUS_TOKEN>|<MINUS_TOKEN>) Term())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/** \u9879 */
void Term():{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
     try {
/*@egen*/
    //<\u56e0\u5b50>\uff5b(*\uff5c/) <\u56e0\u5b50>\uff5d
     NotOrNeg() ( ( <TIMES_TOKEN>|<DIVIDE_TOKEN>|<MOD>)  NotOrNeg())*/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void NotOrNeg():{/*@bgen(jjtree) NotOrNeg */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTORNEG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotOrNeg */
    try {
/*@egen*/
    (<NOT_TOKEN> | <MINUS_TOKEN>)?
    Factor()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/** \u56e0\u5b50 */
void Factor():{/*@bgen(jjtree) Factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Factor */
    try {
/*@egen*/
    //<\u81ea\u5b9a\u4e49\u51fd\u6570\u8c03\u7528> | '(' <\u8868\u8fbe\u5f0f>')' | num | id
    LOOKAHEAD(2)DefinitionFunction()
    |
    <LPAREN_TOKEN> Expression() <RPAREN_TOKEN>
    |
    <NUM_TOKEN>
    |
    LOOKAHEAD(2)<ID_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/** \u81ea\u5b9a\u4e49\u51fd\u6570\u8c03\u7528 */
void DefinitionFunction():{/*@bgen(jjtree) DefinitionFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINITIONFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefinitionFunction */
    try {
/*@egen*/
    //id '(' ')'
    <ID_TOKEN><LPAREN_TOKEN>(loadValue())? <RPAREN_TOKEN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/** \u51fd\u6570\u8c03\u7528\u503c */
void loadValue():{/*@bgen(jjtree) loadValue */
  SimpleNode jjtn000 = new SimpleNode(JJTLOADVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) loadValue */
    try {
/*@egen*/
    Expression()(<COMMA_TOKEN> Expression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
