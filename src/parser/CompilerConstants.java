/* Generated By:JJTree&JavaCC: Do not edit this line. CompilerConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF_TOKEN = 9;
  /** RegularExpression Id. */
  int CONST_TOKEN = 10;
  /** RegularExpression Id. */
  int INT_TOKEN = 11;
  /** RegularExpression Id. */
  int VOID_TOKEN = 12;
  /** RegularExpression Id. */
  int ELSE_TOKEN = 13;
  /** RegularExpression Id. */
  int MAIN_TOKEN = 14;
  /** RegularExpression Id. */
  int WHILE_TOKEN = 15;
  /** RegularExpression Id. */
  int FOR_TOKEN = 16;
  /** RegularExpression Id. */
  int READ_TOKEN = 17;
  /** RegularExpression Id. */
  int PRINTF_TOKEN = 18;
  /** RegularExpression Id. */
  int RETURN_TOKEN = 19;
  /** RegularExpression Id. */
  int ID_TOKEN = 20;
  /** RegularExpression Id. */
  int NUM_TOKEN = 21;
  /** RegularExpression Id. */
  int COMMA_TOKEN = 22;
  /** RegularExpression Id. */
  int SEMICOLON_TOKEN = 23;
  /** RegularExpression Id. */
  int PLUS_TOKEN = 24;
  /** RegularExpression Id. */
  int MINUS_TOKEN = 25;
  /** RegularExpression Id. */
  int NOT_TOKEN = 26;
  /** RegularExpression Id. */
  int TIMES_TOKEN = 27;
  /** RegularExpression Id. */
  int MOD = 28;
  /** RegularExpression Id. */
  int DIVIDE_TOKEN = 29;
  /** RegularExpression Id. */
  int EQUAL_TOKEN = 30;
  /** RegularExpression Id. */
  int LBRACE_TOKEN = 31;
  /** RegularExpression Id. */
  int RBRACE_TOKEN = 32;
  /** RegularExpression Id. */
  int LPAREN_TOKEN = 33;
  /** RegularExpression Id. */
  int RPAREN_TOKEN = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int AND = 36;
  /** RegularExpression Id. */
  int XY = 37;
  /** RegularExpression Id. */
  int XYDY = 38;
  /** RegularExpression Id. */
  int DY = 39;
  /** RegularExpression Id. */
  int DYDY = 40;
  /** RegularExpression Id. */
  int YESDY = 41;
  /** RegularExpression Id. */
  int NOTDY = 42;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENTS = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"if\"",
    "\"const\"",
    "\"int\"",
    "\"void\"",
    "\"else\"",
    "\"main\"",
    "\"while\"",
    "\"for\"",
    "\"read\"",
    "\"write\"",
    "\"return\"",
    "<ID_TOKEN>",
    "<NUM_TOKEN>",
    "\",\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"!\"",
    "\"*\"",
    "\"%\"",
    "\"/\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"||\"",
    "\"&&\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
  };

}
