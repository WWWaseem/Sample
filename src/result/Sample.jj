options {
    UNICODE_INPUT = true;
    JDK_VERSION = "1.8";
}
PARSER_BEGIN(Sample)
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.util.Queue;
import java.util.LinkedList;
public class Sample {
	/** 全局变量*/
	public static ArrayList < SymbolItem > outList = new ArrayList();
	/** 函数及其变量*/
	public static ArrayList < ArrayList < SymbolItem >> partList = new ArrayList();
	/** 超前调用函数表*/
	public static ArrayList < SymbolItem > advanceList = new ArrayList();
	/** 中间指令序列 */
	public static ArrayList < Instruction > middleCodeList = new ArrayList();
	/** 返回标志 */
	public static boolean returnFlag = false;
	public static int returnFlagType = 0;
	public static int lastOutListSize = 0;
	public static int lastListSize = 0;
	public static int TotalValue = 1;
	public static int LoadFlag = 0;
	private static boolean mid = false;
	public static String content = "";
	//是否输出分程序列表
	private static boolean sub_program = false;
	//是否直接解释执行
	private static boolean execute = true;

	private static String outPath = "";
	private static boolean numflag = true;
	/** Main entry point. */
	public static void main(String args[]) throws ParseException {
			String s = "";
			try{
			    s=args[args.length - 1];
			}catch (Exception e){
			    return;
			}
			DeleteComments deleteComments = new DeleteComments();
			String inputstr = deleteComments.clearComment(s);
            getStringStream inputs = new getStringStream();
            InputStream inputstream = inputs.getStringStream2(inputstr);
			Sample sample = new Sample(inputstream);
			try {
				String result = "";
				sample.start();
				if (!MyError.errFlag) {
					outPutMiddleCodeList();
					outPutPartList();
					//writeMiddleCodeList();
					//System.out.println("编译完成!");
					execute();
				}

			} catch (ParseException e) {
				System.err.println(e);
			}

	}
	/**
	 * 创建变量
	 * @param type 0-全局变量 1-函数内部变量
	 */
	public static void createSymbol(Token t, int type) {
		SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.intSym);
		symbolItem.setName(t.image);
		symbolItem.setLevel(type);
		if (type == 0) {
			for (int i = 0; i < outList.size(); i++) {
				if (outList.get(i)
					.getName()
					.equals(symbolItem.getName())) {
					MyError.ShowErrMsg(3, "变量[" + symbolItem.getName() + "]已经定义！");
				}
			}
			//将全局变量存入outlist
			outList.add(symbolItem);
			/*
			依据本次长度 - 上一次长度计算INT指令需要添加的栈数
			即outList.size() - lastOustListSize
			但当新的outList添加后 -> 长度为0, 但lastOutListSize长度仍是前一个List长度, 故置0
			* */
			lastOutListSize = 0;

		} else {
			/*
			每次只操作最新的函数列表
			故新的变量添加至最新的函数列表 : partList.get(partList.size()-1);
			* */
			ArrayList < SymbolItem > fun = partList.get(partList.size() - 1);
			for (int i = 0; i < fun.size(); i++) {
				if (fun.get(i)
					.getName()
					.equals(symbolItem.getName())) {
					MyError.ShowErrMsg(3, "变量[" + symbolItem.getName() + "]已经定义！");
				}
			}
			//partlist的第一层存储了
			fun.add(symbolItem);
		}
	}
	/**
	 * 创建函数并检查超前调用
	 * @param type 1-return int  0-return void
	 */
	public static void createFunction(Token t, int type) {
		TotalValue = 0;
		SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
		symbolItem.setName(t.image);
		symbolItem.setReturnType(type);
		/*定义函数在中间代码的位置
		 * 把函数的定义放在目前已生成中间代码的后面
		 * */
		symbolItem.setAdr(middleCodeList.size());
		ArrayList < SymbolItem > list = new ArrayList();
		list.add(symbolItem);
		lastListSize = 0;
		partList.add(list);
		for (int i = 0; i < advanceList.size(); i++) {
			if (advanceList.get(i)
				.getName()
				.equals(t.image)) {
				SymbolItem sym = advanceList.get(i);
				/*在这里检查了超前调用并将超前调用在中间代码的位置修改了*/
				middleCodeList.get(sym.getAdr())
					.a = middleCodeList.size();
				/*将超前函数表中的该位置删除*/
				advanceList.remove(i);
				i--;
			}
		}
	}
	/**
	 * 生成开辟空间指令
	 * 可根据函数或全局列表的来声明栈空间
	 * @param type 0-全局变量 1-函数内部变量
	 */
	public static void createSymbolSpace(int type) {
		//            System.out.println("outList");
		//            System.out.println(outList.toString());
		//            System.out.println("List");
		//            System.out.println(partList.toString());
		if (type == 0) {
			Instruction item = new Instruction(InstructionName.INT, 0, outList.size() - lastOutListSize);
			lastOutListSize = outList.size();
			middleCodeList.add(item);
		} else {
			ArrayList < SymbolItem > list = partList.get(partList.size() - 1);
			Instruction item = new Instruction(InstructionName.INT, 0, list.size() - 1 - lastListSize);
			//                        System.out.println(list.size() - 1 - lastListSize);
			lastListSize = list.size() - 1;
			middleCodeList.add(item);
		}
	}
	/**
	 * 根据名字查找变量并生成操作指令
	 * @param type 0-取变量 1-存变量
	 */
	public static void getVariableByName(Token t, int type) {
		String id = t.image;
		boolean isFind = false;
		int relative = 1;
		if (TotalValue == 0) {
			ArrayList < SymbolItem > fun = partList.get(partList.size() - 1);
			//        System.out.println(fun.toString());
			for (int i = 0; i < fun.size(); i++) {
				relative++;
				if (fun.get(i)
					.getName()
					.equals(id)) {
					isFind = true;
					break;
				}
			}
		}
		if (isFind) {
			if (type == 0) {
				Instruction item = new Instruction(InstructionName.LOD, 0 + LoadFlag, relative - 1);
				middleCodeList.add(item);
			} else {
				Instruction item = new Instruction(InstructionName.STO, 0 + LoadFlag, relative - 1);
				middleCodeList.add(item);
			}
		} else {
			relative = -1;
			for (int i = 0; i < outList.size(); i++) {
				relative++;
				if (outList.get(i)
					.getName()
					.equals(id)) {
					if (type == 0) {
						//取出全局变量
						Instruction item = new Instruction(InstructionName.LOD, 1, relative);
						middleCodeList.add(item);
					} else {
						//存入全局变量
						Instruction item = new Instruction(InstructionName.STO, 1, relative);
						middleCodeList.add(item);
					}
					return;
				}
			}
			MyError.ShowErrMsg(3, "变量[" + id + "]不存在");
		}
	}
	/**
	 * 根据函数名字查找函数并生成调用函数指令
	 */
	public static void getFunctionByName(Token t) {
		for (int i = 0; i < partList.size(); i++) {
			ArrayList < SymbolItem > fun = partList.get(i);
			if (fun.get(0)
				.getName()
				.equals(t.image)) {
				//找到函数在中间代码的位置，并call跳转过去
				Instruction Instruction = new Instruction(InstructionName.CAL, 0, fun.get(0)
					.getAdr());
				middleCodeList.add(Instruction);
				return;
			}
		}
		//如果单词表中没有该函数，则进行超前调用
		SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
		symbolItem.setName(t.image);
		symbolItem.setAdr(middleCodeList.size());
		advanceList.add(symbolItem);
		//因为函数可能还没有定义，直接为其创建一个中间代码，当遇到此函数定义的时候就可以修改其值了
		Instruction Instruction = new Instruction(InstructionName.CAL, 0, 0);
		middleCodeList.add(Instruction);
	}
	/**
	 * 全局变量定义完调用主函数
	 */
	public static void callMainFunction() {
		Instruction item = new Instruction(InstructionName.CAL, 0, 0);
		middleCodeList.add(item);
		Instruction item2 = new Instruction(InstructionName.RET, 0, 0);
		middleCodeList.add(item2);
	}
	/**
	 * 输出中间指令至屏幕
	 */
	public static void outPutMiddleCodeList() {
		if (mid) {
			System.out.println("编译生成的中间代码序列如下:");
			for (int i = 0; i < middleCodeList.size(); i++) {
				Instruction m = middleCodeList.get(i);
				System.out.println("**" + i + "\t" + m.toOutString());
			}
		}
	}
	/**
	 * 输出分程序列表
	 */
	public static void outPutPartList() {
		if (sub_program) {
			System.out.println("分程序序列表如下:");
			for (int i = 0; i < partList.size(); i++) {
				System.out.println("----Function" + i + ":");
				/*partList里面存的是列表数组，一个列表里面存在多个指令*/
				ArrayList < SymbolItem > fun = partList.get(i);
				for (int j = 0; j < fun.size(); j++) {
					System.out.println("--" + j + "\t" + fun.get(j)
						.toString());
				}
			}
		}
	}
	/**
	 * 输出目标代码
	 */
	public static void writeMiddleCodeList() {
		FileOutputStream out;
		try {
			out = new FileOutputStream(outPath);
			for (int i = 0; i < middleCodeList.size(); i++) {
				Instruction m = middleCodeList.get(i);
				out.write(m.toString()
					.getBytes("utf-8"));

				out.write("\r\n".getBytes("utf-8"));
			}
			out.close();
		} catch (Exception e) {
			MyError.ShowErrMsg(2, "中间指令文件存放位置错误!");
		}

	}
	/**
	 * 解释执行
	 */
	public static void execute() {
		if (execute) {
			Execute execute = new Execute();
			execute.start(middleCodeList);
		}
	}
}
PARSER_END(Sample)

/** 空字符过滤 */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/** TOKEN定义 */
TOKEN: {
		<IF_TOKEN: "if" >
		|
        <CONST_TOKEN: "const" >
		|
		<INT_TOKEN: "int" >
		|
		<VOID_TOKEN: "void" >
		|
		<ELSE_TOKEN: "else" >
		|
		<MAIN_TOKEN: "main" >
		|
		<
		WHILE_TOKEN: "while" >
		|
		<FOR_TOKEN: "for" >
		|
		<READ_TOKEN: "read" >
		|
		<PRINTF_TOKEN: "write" >
		|
		<RETURN_TOKEN: "return" >
		|
		<ID_TOKEN: ["a" - "z", "A" - "Z", "_"](["a" - "z", "A" - "Z", "_", "0" - "9"]) * >
		|
		<
		NUM_TOKEN: (["0" - "9"]) + >
		|
		<COMMA_TOKEN: "," >
		|
		<SEMICOLON_TOKEN: ";" >
		|
		<PLUS_TOKEN: "+" >
		|
		<MINUS_TOKEN: "-" >
		|
		<TIMES_TOKEN: "*" >
		|
		<MOD: "%" >
		|
		<DIVIDE_TOKEN: "/" >
		|
		<EQUAL_TOKEN: "=" >
		|
		<LBRACE_TOKEN: "{" >
		|
		<RBRACE_TOKEN: "}" >
		|
		<LPAREN_TOKEN: "(" >
		|
		<RPAREN_TOKEN: ")" >
		|
		< OR: "||" >
		|
		< AND: "&&" >
		|
		< XY: "<" >
		|
		< XYDY: "<=" >
		|
		< DY: ">" >
		|
		< DYDY: ">=" >
		|
		< YESDY: "==" >
		|
		< NOTDY: "!=" >
}
/** 程序入口.
 * 实现全局变量的定义
 * 自定义函数的定义
 * 主函数
 */
void start(): {} {
	//[<变量定义部分>] {<自定义函数定义部分>} <主函数>
	(LOOKAHEAD(3) VariableDefinition(0) < SEMICOLON_TOKEN > ) * {
		callMainFunction();
	}
	(LOOKAHEAD(3) FunctionDefinition()) *
	MainFunction()
	(LOOKAHEAD(3) VariableDefinition(0) < SEMICOLON_TOKEN > ) * {
			callMainFunction();
		}
		(LOOKAHEAD(3) FunctionDefinition()) * {
			if (advanceList.size() > 0) {
				for (int i = 0; i < advanceList.size(); i++) {
					MyError.ShowErrMsg(4, "函数" + advanceList.get(i)
						.getName() + "未定义！");
				}

			}
		}
}

/** 变量定义部分. */
void VariableDefinition(int Type): {
		Token s;
	} {
    (<CONST_TOKEN>)?
		<INT_TOKEN>
    s=<ID_TOKEN>{   createSymbol(s,Type); createSymbolSpace(Type); }
    (<EQUAL_TOKEN>  Choice(s))?
    (
    <COMMA_TOKEN> s=<ID_TOKEN>{ createSymbol(s,Type); createSymbolSpace(Type); }
    (<EQUAL_TOKEN>  Choice(s))?
    )*
//    <SEMICOLON_TOKEN>
}
/** 自定义函数定义部分. */
void FunctionDefinition() :
{
    Token s;
    int type;
}
{
    //( int id | void id) '(' ')' <分程序>
    (<INT_TOKEN>
    {
        type = 1;
        returnFlagType = 1;
    }
    s=<ID_TOKEN>
    |
     <VOID_TOKEN>
    {
        type = 0;
        returnFlagType = 0;
    } s=<ID_TOKEN>)
    {
        createFunction(s,type);
    }
    <LPAREN_TOKEN> (ParaDefinition())?<RPAREN_TOKEN>
    PartProgram()
}
/** 函数变量定义部分. */
void ParaDefinition() :
{
        Token t;
        Queue<Token> paraLinkedList = new LinkedList();
}
{
    <INT_TOKEN> t = <ID_TOKEN> {paraLinkedList.offer(t);}
    (<COMMA_TOKEN> <INT_TOKEN> t = <ID_TOKEN>{paraLinkedList.offer(t);} )*
    {
        Instruction item = new Instruction(InstructionName.COV, 2, paraLinkedList.size());
        middleCodeList.add(item);
        while(paraLinkedList.size() > 0){
            t = paraLinkedList.poll();
//            System.out.println(t.image);
//            LoadFlag = 1;
            createSymbol(t,1);
//            createSymbolSpace(1);
//            getVariableByName(t,1);

            /*此时栈顶TOP是变量
            * TOP - 1 是ret
            * TOP - 2 是to
            * Top - 3是目标值
            * */
//           middleCodeList.add(item);
//            LoadFlag = 0;
        }
    }
}
/** 主函数部分 */
void MainFunction() :
{
    Token s;
}
{
    //void main'(' ')' <分程序>
//    <VOID_TOKEN> s=<MAIN_TOKEN> <LPAREN_TOKEN> <RPAREN_TOKEN>
    s=<MAIN_TOKEN> <LPAREN_TOKEN> <RPAREN_TOKEN>
    {
        returnFlagType = 0;
        int mainAddress = middleCodeList.size();
        for(int i=0;i<middleCodeList.size();i++)
        {
            if(middleCodeList.get(i).instructionName==InstructionName.CAL)
            {
                 middleCodeList.get(i).a = mainAddress;
                 break;
            }
        }
        createFunction(s,0);
    }
    PartProgram()
}

/**
 * 分程序部分
 * 如果分程序为void且没有返回值，则自动补上返回值（退栈语句）
 */
void PartProgram():
{}
{
    //'{' [<变量定义部分>] <语句序列> '}'
    <LBRACE_TOKEN>
    {
        returnFlag = false;
    }
    WordList()
    <RBRACE_TOKEN>
    {
        if(!returnFlag&&returnFlagType==0){
            Instruction item = new Instruction(InstructionName.RET,0,0);
            middleCodeList.add(item);
        }
        else if(!returnFlag&&returnFlagType==1)
        {
            MyError.ShowErrMsg(4,"返回值类型为int的函数必须有返回值!");
        }
    }
}

/** 语句序列 */
void WordList():
{}
{
    //<语句> {<语句>}
    (Word())*
}

/** 语句 */
void Word():
{}
{
    //<条件语句>｜<循环语句> | '{'<语句序列>'}' | <自定义函数调用语句> |
    //<赋值语句> | <返回语句> | <读语句> | <写语句> | ;
    If_Word()
    |
    For_Word()
    |
    LOOKAHEAD(2)<LBRACE_TOKEN> WordList() <RBRACE_TOKEN>
    |
    LOOKAHEAD(2)DefinitionFunction()
    |
    Equals_Word()
    |
    Return_Word(){returnFlag=true;}
//    |
//    ReadWord()
    |
    WriteWord()
    |
    VariableDefinition(1) <SEMICOLON_TOKEN>
    |
    <SEMICOLON_TOKEN>
}

/** 条件语句 */
void If_Word():
{
    int jpcAdress;
    int jmpAdress;
}
{
    //if '('<表达式>')' <语句> [else <语句> ]
    <IF_TOKEN> <LPAREN_TOKEN>
    Expression()
    {
        Instruction item = new Instruction(InstructionName.JPC,0,0);
        middleCodeList.add(item);
        jpcAdress = middleCodeList.size()-1;
    }
    <RPAREN_TOKEN>
    Word()
    {
        Instruction item2 = new Instruction(InstructionName.JMP,0,middleCodeList.size()+1);
        middleCodeList.add(item2);
        middleCodeList.get(jpcAdress).a = middleCodeList.size();
        jmpAdress = middleCodeList.size()-1;
    }
    [LOOKAHEAD(2)<ELSE_TOKEN> Word()
    {
        middleCodeList.get(jmpAdress).a = middleCodeList.size();
    }
    ]
}

/** 循环语句 */
void For_Word():
{
    int whileBegin;
    int num;
    int whileEnd;
    int mid;
    int end;
}
{
    //while '(' <表达式>')' <语句>
   ( <WHILE_TOKEN>
    {
        whileBegin = middleCodeList.size();
    }
    <LPAREN_TOKEN> Expression()
    {
        Instruction item = new Instruction(InstructionName.JPC,0,whileBegin);
        middleCodeList.add(item);
        num=middleCodeList.size();
    }
    <RPAREN_TOKEN> Word()
    {
        Instruction item2 = new Instruction(InstructionName.JMP,0,whileBegin);
        middleCodeList.add(item2);
        whileEnd = middleCodeList.size();
        middleCodeList.get(num-1).a = whileEnd;
    })
    |(<FOR_TOKEN>
    {
        //whileBegin = middleCodeList.size();
    }
    <LPAREN_TOKEN>(Equals_Word()){
        whileBegin = middleCodeList.size();
    } Expression()<SEMICOLON_TOKEN>
   {
       Instruction item3 = new Instruction(InstructionName.JPC,0,whileBegin);
       middleCodeList.add(item3);
       num=middleCodeList.size();
   }
    (Equals_Word2())
    {
        mid = middleCodeList.size();//这个位置的定义放到最后执行[num-(mid-1)]放到end这里
    }
    <RPAREN_TOKEN>
    Word()
    {
        end = middleCodeList.size();
        if(end>mid)
        {
            ArrayList<Instruction> temp = new ArrayList();
            Instruction te;
            int k=0;
            for(int i = num; i < end; i++) {
                if(i<(num+(end-mid)))
                {
                    te = middleCodeList.get(i);
                    middleCodeList.set(i,middleCodeList.get(mid+k));
                    k++;
                    temp.add(te);
                }
                else {
                    middleCodeList.set(i,temp.get(i-mid-2));
                }

            }
        }
        Instruction item4 = new Instruction(InstructionName.JMP,0,whileBegin);
        middleCodeList.add(item4);
        whileEnd = middleCodeList.size();
        middleCodeList.get(num-1).a = whileEnd;
    })

}

/** 赋值语句 */
void Equals_Word():
{
    Token t;
}
{
    //id = <表达式>;
    t=<ID_TOKEN> <EQUAL_TOKEN>Choice(t)<SEMICOLON_TOKEN>
}
void Choice(Token t):{}
{
    Expression() {
            getVariableByName(t,1);
        }
    |
    <READ_TOKEN> <LPAREN_TOKEN>  <RPAREN_TOKEN> {
    Instruction item = new Instruction(InstructionName.RED,0,0);
    middleCodeList.add(item);
    getVariableByName(t,1);
    }
}
/** 赋值语句 */
void Equals_Word2():
{
    Token t;
}
{
    //id = <表达式>;
    t=<ID_TOKEN> <EQUAL_TOKEN> Expression(){
        getVariableByName(t,1);
    }
}

/** 返回语句 */
void Return_Word():
{
    int flag=0;
}
{
    //return ['(' <表达式> ')'] ;
    <RETURN_TOKEN> [ Expression() { flag = 1; } ] <SEMICOLON_TOKEN>
    {
        if(returnFlagType==0&&flag==1){
            MyError.ShowErrMsg(4,"返回值为void类型的函数只能返回null");
        }else if(returnFlagType==1&&flag==0){
            MyError.ShowErrMsg(4,"返回值类型为int的函数必须有返回值!");
        }
        Instruction item = new Instruction(InstructionName.RET,0,0);
        middleCodeList.add(item);
//        getVariableByName(t,1);
    }
}

/** 写语句 */
void WriteWord():
{}
{
    // printf '(' [ <表达式>] ')';
    <PRINTF_TOKEN> <LPAREN_TOKEN> [Expression()] <RPAREN_TOKEN> <SEMICOLON_TOKEN>{
        Instruction item = new Instruction(InstructionName.WRT,0,0);
        middleCodeList.add(item);
    }
}

void Expression() :
{
    Token t;
}
{
  logic_and()(  <OR> logic_and() {
     Instruction item = new Instruction(InstructionName.LOR,0,0);
     middleCodeList.add(item);
    } )*

}
//逻辑与
void logic_and():
{
    Token t;
}
{
    equality()( <AND> equality()
    {
        Instruction item = new Instruction(InstructionName.LOA,0,0);
        middleCodeList.add(item);
    })*
}
//逻辑等与不等
void equality():
{
    Token t;
}
{
    comparison() ( (t=<YESDY>|t=<NOTDY>)comparison()
    {
        if(t.image.equals("==")){
            Instruction item = new Instruction(InstructionName.EQY,0,0);
            middleCodeList.add(item);
        }else{
            Instruction item = new Instruction(InstructionName.EQN,0,0);
            middleCodeList.add(item);
        }
    })*

}
//逻辑判断 : 优先级低于加减
void comparison():
{
    Token t;
}
{
    add()( (t=<XY>|t=<XYDY>|t=<DY>|t=<DYDY>)add()
    {
        if(t.image.equals(">")){
            Instruction item = new Instruction(InstructionName.BOM,0,0);
            middleCodeList.add(item);
        }
        else if (t.image.equals(">=")){
            Instruction item = new Instruction(InstructionName.BQM,0,0);
            middleCodeList.add(item);
        }
        else if (t.image.equals("<")){
            Instruction item = new Instruction(InstructionName.SOM,0,0);
            middleCodeList.add(item);
        }
        else{
            Instruction item = new Instruction(InstructionName.SQM,0,0);
            middleCodeList.add(item);
        }
    })*
}


/** 表达式 */
void add():
{
    Token t;
}
{
    //[+｜-] <项> { (+｜-) <项>}
    [<PLUS_TOKEN>
    {
        numflag=true;
    }
    |
    <MINUS_TOKEN>
    {
        numflag=false;
    }
    /*这里需要修改成有逻辑表达式的情况*/
    ] Term() ( (
    t=<PLUS_TOKEN>|t=<MINUS_TOKEN>) Term()
    {
        if(t.image.equals("+")){
            Instruction item = new Instruction(InstructionName.ADD,0,0);
            middleCodeList.add(item);
        }else{
            Instruction item = new Instruction(InstructionName.SUB,0,0);
            middleCodeList.add(item);
        }
    })*
}



/** 项 */
void Term():
{
    Token t;
}
{
    //<因子>｛(*｜/) <因子>｝
     Neg() ( (
        t=<TIMES_TOKEN>|t=<DIVIDE_TOKEN>|t=<MOD>)  Neg()
        {
            if(t.image.equals("*")){
                Instruction item = new Instruction(InstructionName.MUL,0,0);
                middleCodeList.add(item);
            }else if(t.image.equals("/")) {
                Instruction item = new Instruction(InstructionName.DIV,0,0);
                middleCodeList.add(item);
            }else {
                Instruction item = new Instruction(InstructionName.MOD,0,0);
                middleCodeList.add(item);
            }

        })*
}

void Neg():{}
{
    (LOOKAHEAD(2)<MINUS_TOKEN> {numflag = !numflag;})?
    Factor()
}

/** 因子 */
void Factor():
{
    Token s;
}
{
    //<自定义函数调用> | '(' <表达式>')' | num | id
    LOOKAHEAD(2)DefinitionFunction()
    |
    <LPAREN_TOKEN> Expression() <RPAREN_TOKEN>
    |
    s=<NUM_TOKEN>{
        Instruction item=null;
        if(numflag)
        {
            item = new Instruction(InstructionName.LIT,0,Integer.parseInt(s.image));
        }
        else
        {
            item = new Instruction(InstructionName.LIT,0,-Integer.parseInt(s.image));
        }
        numflag=true;
        middleCodeList.add(item);
    }
    |
    LOOKAHEAD(2)s=<ID_TOKEN>
    {
//        System.out.println("numflag "+numflag+s.image);
        getVariableByName(s,0);
        if(!numflag){
            item = new Instruction(InstructionName.NEG,0,0);
            middleCodeList.add(item);
            numflag = true;
        }
    }
}


/** 自定义函数调用
*
*/
void DefinitionFunction():
{
    Token t;
}
{
    //id '(' ')'
    t=<ID_TOKEN>
     <LPAREN_TOKEN>(loadValue())? <RPAREN_TOKEN>
     {
                 getFunctionByName(t);
     }

}
/** 函数调用值 */
void loadValue():
{
    Token t;
}
{
    //id '(' ')'
//    {System.out.println("Expression");}
    Expression()(<COMMA_TOKEN> Expression() )*
}