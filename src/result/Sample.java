/* Generated By:JavaCC: Do not edit this line. Sample.java */
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.util.Queue;
import java.util.LinkedList;
public class Sample implements SampleConstants {
        /** 全局变量*/
        public static ArrayList < SymbolItem > outList = new ArrayList();
        /** 函数及其变量*/
        public static ArrayList < ArrayList < SymbolItem >> partList = new ArrayList();
        /** 超前调用函数表*/
        public static ArrayList < SymbolItem > advanceList = new ArrayList();
        /** 中间指令序列 */
        public static ArrayList < Instruction > middleCodeList = new ArrayList();
        /** 返回标志 */
        public static boolean returnFlag = false;
        public static int returnFlagType = 0;
        public static int lastOutListSize = 0;
        public static int lastListSize = 0;
        public static int TotalValue = 1;
        public static int LoadFlag = 0;
        private static boolean mid = false;
        public static String content = "";
        //是否输出分程序列表
        private static boolean sub_program = false;
        //是否直接解释执行
        private static boolean execute = true;

        private static String outPath = "";
        private static boolean numflag = true;
        /** Main entry point. */
        public static void main(String args[]) throws ParseException {
                        String s = "";
                        try{
                            s=args[args.length - 1];
                        }catch (Exception e){
                            return;
                        }
                        DeleteComments deleteComments = new DeleteComments();
                        String inputstr = deleteComments.clearComment(s);
            getStringStream inputs = new getStringStream();
            InputStream inputstream = inputs.getStringStream2(inputstr);
                        Sample sample = new Sample(inputstream);
                        try {
                                String result = "";
                                sample.start();
                                if (!MyError.errFlag) {
                                        outPutMiddleCodeList();
                                        outPutPartList();
                                        //writeMiddleCodeList();
                                        //System.out.println("编译完成!");
                                        execute();
                                }

                        } catch (ParseException e) {
                                System.err.println(e);
                        }

        }
        /**
	 * 创建变量
	 * @param type 0-全局变量 1-函数内部变量
	 */
        public static void createSymbol(Token t, int type) {
                SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.intSym);
                symbolItem.setName(t.image);
                symbolItem.setLevel(type);
                if (type == 0) {
                        for (int i = 0; i < outList.size(); i++) {
                                if (outList.get(i)
                                        .getName()
                                        .equals(symbolItem.getName())) {
                                        MyError.ShowErrMsg(3, "\u53d8\u91cf[" + symbolItem.getName() + "]\u5df2\u7ecf\u5b9a\u4e49\uff01");
                                }
                        }
                        //将全局变量存入outlist
                        outList.add(symbolItem);
                        /*
			依据本次长度 - 上一次长度计算INT指令需要添加的栈数
			即outList.size() - lastOustListSize
			但当新的outList添加后 -> 长度为0, 但lastOutListSize长度仍是前一个List长度, 故置0
			* */
                        lastOutListSize = 0;

                } else {
                        /*
			每次只操作最新的函数列表
			故新的变量添加至最新的函数列表 : partList.get(partList.size()-1);
			* */
                        ArrayList < SymbolItem > fun = partList.get(partList.size() - 1);
                        for (int i = 0; i < fun.size(); i++) {
                                if (fun.get(i)
                                        .getName()
                                        .equals(symbolItem.getName())) {
                                        MyError.ShowErrMsg(3, "\u53d8\u91cf[" + symbolItem.getName() + "]\u5df2\u7ecf\u5b9a\u4e49\uff01");
                                }
                        }
                        //partlist的第一层存储了
                        fun.add(symbolItem);
                }
        }
        /**
	 * 创建函数并检查超前调用
	 * @param type 1-return int  0-return void
	 */
        public static void createFunction(Token t, int type) {
                TotalValue = 0;
                SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
                symbolItem.setName(t.image);
                symbolItem.setReturnType(type);
                /*定义函数在中间代码的位置
		 * 把函数的定义放在目前已生成中间代码的后面
		 * */
                symbolItem.setAdr(middleCodeList.size());
                ArrayList < SymbolItem > list = new ArrayList();
                list.add(symbolItem);
                lastListSize = 0;
                partList.add(list);
                for (int i = 0; i < advanceList.size(); i++) {
                        if (advanceList.get(i)
                                .getName()
                                .equals(t.image)) {
                                SymbolItem sym = advanceList.get(i);
                                /*在这里检查了超前调用并将超前调用在中间代码的位置修改了*/
                                middleCodeList.get(sym.getAdr())
                                        .a = middleCodeList.size();
                                /*将超前函数表中的该位置删除*/
                                advanceList.remove(i);
                                i--;
                        }
                }
        }
        /**
	 * 生成开辟空间指令
	 * 可根据函数或全局列表的来声明栈空间
	 * @param type 0-全局变量 1-函数内部变量
	 */
        public static void createSymbolSpace(int type) {
                //            System.out.println("outList");
                //            System.out.println(outList.toString());
                //            System.out.println("List");
                //            System.out.println(partList.toString());
                if (type == 0) {
                        Instruction item = new Instruction(InstructionName.INT, 0, outList.size() - lastOutListSize);
                        lastOutListSize = outList.size();
                        middleCodeList.add(item);
                } else {
                        ArrayList < SymbolItem > list = partList.get(partList.size() - 1);
                        Instruction item = new Instruction(InstructionName.INT, 0, list.size() - 1 - lastListSize);
                        //                        System.out.println(list.size() - 1 - lastListSize);
                        lastListSize = list.size() - 1;
                        middleCodeList.add(item);
                }
        }
        /**
	 * 根据名字查找变量并生成操作指令
	 * @param type 0-取变量 1-存变量
	 */
        public static void getVariableByName(Token t, int type) {
                String id = t.image;
                boolean isFind = false;
                int relative = 1;
                if (TotalValue == 0) {
                        ArrayList < SymbolItem > fun = partList.get(partList.size() - 1);
                        //        System.out.println(fun.toString());
                        for (int i = 0; i < fun.size(); i++) {
                                relative++;
                                if (fun.get(i)
                                        .getName()
                                        .equals(id)) {
                                        isFind = true;
                                        break;
                                }
                        }
                }
                if (isFind) {
                        if (type == 0) {
                                Instruction item = new Instruction(InstructionName.LOD, 0 + LoadFlag, relative - 1);
                                middleCodeList.add(item);
                        } else {
                                Instruction item = new Instruction(InstructionName.STO, 0 + LoadFlag, relative - 1);
                                middleCodeList.add(item);
                        }
                } else {
                        relative = -1;
                        for (int i = 0; i < outList.size(); i++) {
                                relative++;
                                if (outList.get(i)
                                        .getName()
                                        .equals(id)) {
                                        if (type == 0) {
                                                //取出全局变量
                                                Instruction item = new Instruction(InstructionName.LOD, 1, relative);
                                                middleCodeList.add(item);
                                        } else {
                                                //存入全局变量
                                                Instruction item = new Instruction(InstructionName.STO, 1, relative);
                                                middleCodeList.add(item);
                                        }
                                        return;
                                }
                        }
                        MyError.ShowErrMsg(3, "\u53d8\u91cf[" + id + "]\u4e0d\u5b58\u5728");
                }
        }
        /**
	 * 根据函数名字查找函数并生成调用函数指令
	 */
        public static void getFunctionByName(Token t) {
                for (int i = 0; i < partList.size(); i++) {
                        ArrayList < SymbolItem > fun = partList.get(i);
                        if (fun.get(0)
                                .getName()
                                .equals(t.image)) {
                                //找到函数在中间代码的位置，并call跳转过去
                                Instruction Instruction = new Instruction(InstructionName.CAL, 0, fun.get(0)
                                        .getAdr());
                                middleCodeList.add(Instruction);
                                return;
                        }
                }
                //如果单词表中没有该函数，则进行超前调用
                SymbolItem symbolItem = new SymbolItem(SymbolItem.SymbolType.functionSym);
                symbolItem.setName(t.image);
                symbolItem.setAdr(middleCodeList.size());
                advanceList.add(symbolItem);
                //因为函数可能还没有定义，直接为其创建一个中间代码，当遇到此函数定义的时候就可以修改其值了
                Instruction Instruction = new Instruction(InstructionName.CAL, 0, 0);
                middleCodeList.add(Instruction);
        }
        /**
	 * 全局变量定义完调用主函数
	 */
        public static void callMainFunction() {
                Instruction item = new Instruction(InstructionName.CAL, 0, 0);
                middleCodeList.add(item);
                Instruction item2 = new Instruction(InstructionName.RET, 0, 0);
                middleCodeList.add(item2);
        }
        /**
	 * 输出中间指令至屏幕
	 */
        public static void outPutMiddleCodeList() {
                if (mid) {
                        System.out.println("\u7f16\u8bd1\u751f\u6210\u7684\u4e2d\u95f4\u4ee3\u7801\u5e8f\u5217\u5982\u4e0b:");
                        for (int i = 0; i < middleCodeList.size(); i++) {
                                Instruction m = middleCodeList.get(i);
                                System.out.println("**" + i + "\t" + m.toOutString());
                        }
                }
        }
        /**
	 * 输出分程序列表
	 */
        public static void outPutPartList() {
                if (sub_program) {
                        System.out.println("\u5206\u7a0b\u5e8f\u5e8f\u5217\u8868\u5982\u4e0b:");
                        for (int i = 0; i < partList.size(); i++) {
                                System.out.println("----Function" + i + ":");
                                /*partList里面存的是列表数组，一个列表里面存在多个指令*/
                                ArrayList < SymbolItem > fun = partList.get(i);
                                for (int j = 0; j < fun.size(); j++) {
                                        System.out.println("--" + j + "\t" + fun.get(j)
                                                .toString());
                                }
                        }
                }
        }
        /**
	 * 输出目标代码
	 */
        public static void writeMiddleCodeList() {
                FileOutputStream out;
                try {
                        out = new FileOutputStream(outPath);
                        for (int i = 0; i < middleCodeList.size(); i++) {
                                Instruction m = middleCodeList.get(i);
                                out.write(m.toString()
                                        .getBytes("utf-8"));

                                out.write("\r\n".getBytes("utf-8"));
                        }
                        out.close();
                } catch (Exception e) {
                        MyError.ShowErrMsg(2, "\u4e2d\u95f4\u6307\u4ee4\u6587\u4ef6\u5b58\u653e\u4f4d\u7f6e\u9519\u8bef!");
                }

        }
        /**
	 * 解释执行
	 */
        public static void execute() {
                if (execute) {
                        Execute execute = new Execute();
                        execute.start(middleCodeList);
                }
        }

/** 程序入口.
 * 实现全局变量的定义
 * 自定义函数的定义
 * 主函数
 */
  static final public void start() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      VariableDefinition(0);
      jj_consume_token(SEMICOLON_TOKEN);
    }
                callMainFunction();
    label_2:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_2;
      }
      FunctionDefinition();
    }
    MainFunction();
    label_3:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_3;
      }
      VariableDefinition(0);
      jj_consume_token(SEMICOLON_TOKEN);
    }
                        callMainFunction();
    label_4:
    while (true) {
      if (jj_2_4(3)) {
        ;
      } else {
        break label_4;
      }
      FunctionDefinition();
    }
                        if (advanceList.size() > 0) {
                                for (int i = 0; i < advanceList.size(); i++) {
                                        MyError.ShowErrMsg(4, "\u51fd\u6570" + advanceList.get(i)
                                                .getName() + "\u672a\u5b9a\u4e49\uff01");
                                }

                        }
  }

/** 变量定义部分. */
  static final public void VariableDefinition(int Type) throws ParseException {
                Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_TOKEN:
      jj_consume_token(CONST_TOKEN);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(INT_TOKEN);
    s = jj_consume_token(ID_TOKEN);
                    createSymbol(s,Type); createSymbolSpace(Type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_TOKEN:
      jj_consume_token(EQUAL_TOKEN);
      Choice(s);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TOKEN:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA_TOKEN);
      s = jj_consume_token(ID_TOKEN);
                                createSymbol(s,Type); createSymbolSpace(Type);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_TOKEN:
        jj_consume_token(EQUAL_TOKEN);
        Choice(s);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    }
  }

/** 自定义函数定义部分. */
  static final public void FunctionDefinition() throws ParseException {
    Token s;
    int type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TOKEN:
      jj_consume_token(INT_TOKEN);
        type = 1;
        returnFlagType = 1;
      s = jj_consume_token(ID_TOKEN);
      break;
    case VOID_TOKEN:
      jj_consume_token(VOID_TOKEN);
        type = 0;
        returnFlagType = 0;
      s = jj_consume_token(ID_TOKEN);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        createFunction(s,type);
    jj_consume_token(LPAREN_TOKEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TOKEN:
      ParaDefinition();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_TOKEN);
    PartProgram();
  }

/** 函数变量定义部分. */
  static final public void ParaDefinition() throws ParseException {
        Token t;
        Queue<Token> paraLinkedList = new LinkedList();
    jj_consume_token(INT_TOKEN);
    t = jj_consume_token(ID_TOKEN);
                                paraLinkedList.offer(t);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TOKEN:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA_TOKEN);
      jj_consume_token(INT_TOKEN);
      t = jj_consume_token(ID_TOKEN);
                                              paraLinkedList.offer(t);
    }
        Instruction item = new Instruction(InstructionName.COV, 2, paraLinkedList.size());
        middleCodeList.add(item);
        while(paraLinkedList.size() > 0){
            t = paraLinkedList.poll();
//            System.out.println(t.image);
//            LoadFlag = 1;
            createSymbol(t,1);
//            createSymbolSpace(1);
//            getVariableByName(t,1);

            /*此时栈顶TOP是变量
            * TOP - 1 是ret
            * TOP - 2 是to
            * Top - 3是目标值
            * */
//           middleCodeList.add(item);
//            LoadFlag = 0;
        }
  }

/** 主函数部分 */
  static final public void MainFunction() throws ParseException {
    Token s;
    //void main'(' ')' <分程序>
    //    <VOID_TOKEN> s=<MAIN_TOKEN> <LPAREN_TOKEN> <RPAREN_TOKEN>
        s = jj_consume_token(MAIN_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    jj_consume_token(RPAREN_TOKEN);
        returnFlagType = 0;
        int mainAddress = middleCodeList.size();
        for(int i=0;i<middleCodeList.size();i++)
        {
            if(middleCodeList.get(i).instructionName==InstructionName.CAL)
            {
                 middleCodeList.get(i).a = mainAddress;
                 break;
            }
        }
        createFunction(s,0);
    PartProgram();
  }

/**
 * 分程序部分
 * 如果分程序为void且没有返回值，则自动补上返回值（退栈语句）
 */
  static final public void PartProgram() throws ParseException {
    jj_consume_token(LBRACE_TOKEN);
        returnFlag = false;
    WordList();
    jj_consume_token(RBRACE_TOKEN);
        if(!returnFlag&&returnFlagType==0){
            Instruction item = new Instruction(InstructionName.RET,0,0);
            middleCodeList.add(item);
        }
        else if(!returnFlag&&returnFlagType==1)
        {
            MyError.ShowErrMsg(4,"\u8fd4\u56de\u503c\u7c7b\u578b\u4e3aint\u7684\u51fd\u6570\u5fc5\u987b\u6709\u8fd4\u56de\u503c!");
        }
  }

/** 语句序列 */
  static final public void WordList() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_TOKEN:
      case CONST_TOKEN:
      case INT_TOKEN:
      case WHILE_TOKEN:
      case FOR_TOKEN:
      case PRINTF_TOKEN:
      case RETURN_TOKEN:
      case ID_TOKEN:
      case SEMICOLON_TOKEN:
      case LBRACE_TOKEN:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      Word();
    }
  }

/** 语句 */
  static final public void Word() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF_TOKEN:
      If_Word();
      break;
    case WHILE_TOKEN:
    case FOR_TOKEN:
      For_Word();
      break;
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(LBRACE_TOKEN);
        WordList();
        jj_consume_token(RBRACE_TOKEN);
      } else if (jj_2_6(2)) {
        DefinitionFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID_TOKEN:
          Equals_Word();
          break;
        case RETURN_TOKEN:
          Return_Word();
                  returnFlag=true;
          break;
        case PRINTF_TOKEN:
          WriteWord();
          break;
        case CONST_TOKEN:
        case INT_TOKEN:
          VariableDefinition(1);
          jj_consume_token(SEMICOLON_TOKEN);
          break;
        case SEMICOLON_TOKEN:
          jj_consume_token(SEMICOLON_TOKEN);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/** 条件语句 */
  static final public void If_Word() throws ParseException {
    int jpcAdress;
    int jmpAdress;
    jj_consume_token(IF_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    Expression();
        Instruction item = new Instruction(InstructionName.JPC,0,0);
        middleCodeList.add(item);
        jpcAdress = middleCodeList.size()-1;
    jj_consume_token(RPAREN_TOKEN);
    Word();
        Instruction item2 = new Instruction(InstructionName.JMP,0,middleCodeList.size()+1);
        middleCodeList.add(item2);
        middleCodeList.get(jpcAdress).a = middleCodeList.size();
        jmpAdress = middleCodeList.size()-1;
    if (jj_2_7(2)) {
      jj_consume_token(ELSE_TOKEN);
      Word();
        middleCodeList.get(jmpAdress).a = middleCodeList.size();
    } else {
      ;
    }
  }

/** 循环语句 */
  static final public void For_Word() throws ParseException {
    int whileBegin;
    int num;
    int whileEnd;
    int mid;
    int end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE_TOKEN:
      jj_consume_token(WHILE_TOKEN);
        whileBegin = middleCodeList.size();
      jj_consume_token(LPAREN_TOKEN);
      Expression();
        Instruction item = new Instruction(InstructionName.JPC,0,whileBegin);
        middleCodeList.add(item);
        num=middleCodeList.size();
      jj_consume_token(RPAREN_TOKEN);
      Word();
        Instruction item2 = new Instruction(InstructionName.JMP,0,whileBegin);
        middleCodeList.add(item2);
        whileEnd = middleCodeList.size();
        middleCodeList.get(num-1).a = whileEnd;
      break;
    case FOR_TOKEN:
      jj_consume_token(FOR_TOKEN);

      jj_consume_token(LPAREN_TOKEN);
      Equals_Word();
        whileBegin = middleCodeList.size();
      Expression();
      jj_consume_token(SEMICOLON_TOKEN);
       Instruction item3 = new Instruction(InstructionName.JPC,0,whileBegin);
       middleCodeList.add(item3);
       num=middleCodeList.size();
      Equals_Word2();
        mid = middleCodeList.size();//这个位置的定义放到最后执行[num-(mid-1)]放到end这里

      jj_consume_token(RPAREN_TOKEN);
      Word();
        end = middleCodeList.size();
        if(end>mid)
        {
            ArrayList<Instruction> temp = new ArrayList();
            Instruction te;
            int k=0;
            for(int i = num; i < end; i++) {
                if(i<(num+(end-mid)))
                {
                    te = middleCodeList.get(i);
                    middleCodeList.set(i,middleCodeList.get(mid+k));
                    k++;
                    temp.add(te);
                }
                else {
                    middleCodeList.set(i,temp.get(i-mid-2));
                }

            }
        }
        Instruction item4 = new Instruction(InstructionName.JMP,0,whileBegin);
        middleCodeList.add(item4);
        whileEnd = middleCodeList.size();
        middleCodeList.get(num-1).a = whileEnd;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** 赋值语句 */
  static final public void Equals_Word() throws ParseException {
    Token t;
    //id = <表达式>;
        t = jj_consume_token(ID_TOKEN);
    jj_consume_token(EQUAL_TOKEN);
    Choice(t);
    jj_consume_token(SEMICOLON_TOKEN);
  }

  static final public void Choice(Token t) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_TOKEN:
    case NUM_TOKEN:
    case PLUS_TOKEN:
    case MINUS_TOKEN:
    case LPAREN_TOKEN:
      Expression();
            getVariableByName(t,1);
      break;
    case READ_TOKEN:
      jj_consume_token(READ_TOKEN);
      jj_consume_token(LPAREN_TOKEN);
      jj_consume_token(RPAREN_TOKEN);
    Instruction item = new Instruction(InstructionName.RED,0,0);
    middleCodeList.add(item);
    getVariableByName(t,1);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** 赋值语句 */
  static final public void Equals_Word2() throws ParseException {
    Token t;
    //id = <表达式>;
        t = jj_consume_token(ID_TOKEN);
    jj_consume_token(EQUAL_TOKEN);
    Expression();
        getVariableByName(t,1);
  }

/** 返回语句 */
  static final public void Return_Word() throws ParseException {
    int flag=0;
    jj_consume_token(RETURN_TOKEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_TOKEN:
    case NUM_TOKEN:
    case PLUS_TOKEN:
    case MINUS_TOKEN:
    case LPAREN_TOKEN:
      Expression();
                                    flag = 1;
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON_TOKEN);
        if(returnFlagType==0&&flag==1){
            MyError.ShowErrMsg(4,"\u8fd4\u56de\u503c\u4e3avoid\u7c7b\u578b\u7684\u51fd\u6570\u53ea\u80fd\u8fd4\u56denull");
        }else if(returnFlagType==1&&flag==0){
            MyError.ShowErrMsg(4,"\u8fd4\u56de\u503c\u7c7b\u578b\u4e3aint\u7684\u51fd\u6570\u5fc5\u987b\u6709\u8fd4\u56de\u503c!");
        }
        Instruction item = new Instruction(InstructionName.RET,0,0);
        middleCodeList.add(item);
//        getVariableByName(t,1);

  }

/** 写语句 */
  static final public void WriteWord() throws ParseException {
    jj_consume_token(PRINTF_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_TOKEN:
    case NUM_TOKEN:
    case PLUS_TOKEN:
    case MINUS_TOKEN:
    case LPAREN_TOKEN:
      Expression();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_TOKEN);
    jj_consume_token(SEMICOLON_TOKEN);
        Instruction item = new Instruction(InstructionName.WRT,0,0);
        middleCodeList.add(item);
  }

  static final public void Expression() throws ParseException {
    Token t;
    logic_and();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(OR);
      logic_and();
     Instruction item = new Instruction(InstructionName.LOR,0,0);
     middleCodeList.add(item);
    }
  }

//逻辑与
  static final public void logic_and() throws ParseException {
    Token t;
    equality();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      equality();
        Instruction item = new Instruction(InstructionName.LOA,0,0);
        middleCodeList.add(item);
    }
  }

//逻辑等与不等
  static final public void equality() throws ParseException {
    Token t;
    comparison();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YESDY:
      case NOTDY:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YESDY:
        t = jj_consume_token(YESDY);
        break;
      case NOTDY:
        t = jj_consume_token(NOTDY);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      comparison();
        if(t.image.equals("==")){
            Instruction item = new Instruction(InstructionName.EQY,0,0);
            middleCodeList.add(item);
        }else{
            Instruction item = new Instruction(InstructionName.EQN,0,0);
            middleCodeList.add(item);
        }
    }
  }

//逻辑判断 : 优先级低于加减
  static final public void comparison() throws ParseException {
    Token t;
    add();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XY:
      case XYDY:
      case DY:
      case DYDY:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XY:
        t = jj_consume_token(XY);
        break;
      case XYDY:
        t = jj_consume_token(XYDY);
        break;
      case DY:
        t = jj_consume_token(DY);
        break;
      case DYDY:
        t = jj_consume_token(DYDY);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      add();
        if(t.image.equals(">")){
            Instruction item = new Instruction(InstructionName.BOM,0,0);
            middleCodeList.add(item);
        }
        else if (t.image.equals(">=")){
            Instruction item = new Instruction(InstructionName.BQM,0,0);
            middleCodeList.add(item);
        }
        else if (t.image.equals("<")){
            Instruction item = new Instruction(InstructionName.SOM,0,0);
            middleCodeList.add(item);
        }
        else{
            Instruction item = new Instruction(InstructionName.SQM,0,0);
            middleCodeList.add(item);
        }
    }
  }

/** 表达式 */
  static final public void add() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_TOKEN:
    case MINUS_TOKEN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_TOKEN:
        jj_consume_token(PLUS_TOKEN);
        numflag=true;
        break;
      case MINUS_TOKEN:
        jj_consume_token(MINUS_TOKEN);
        numflag=false;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    Term();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_TOKEN:
      case MINUS_TOKEN:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_TOKEN:
        t = jj_consume_token(PLUS_TOKEN);
        break;
      case MINUS_TOKEN:
        t = jj_consume_token(MINUS_TOKEN);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
        if(t.image.equals("+")){
            Instruction item = new Instruction(InstructionName.ADD,0,0);
            middleCodeList.add(item);
        }else{
            Instruction item = new Instruction(InstructionName.SUB,0,0);
            middleCodeList.add(item);
        }
    }
  }

/** 项 */
  static final public void Term() throws ParseException {
    Token t;
    Neg();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES_TOKEN:
      case MOD:
      case DIVIDE_TOKEN:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES_TOKEN:
        t = jj_consume_token(TIMES_TOKEN);
        break;
      case DIVIDE_TOKEN:
        t = jj_consume_token(DIVIDE_TOKEN);
        break;
      case MOD:
        t = jj_consume_token(MOD);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Neg();
            if(t.image.equals("*")){
                Instruction item = new Instruction(InstructionName.MUL,0,0);
                middleCodeList.add(item);
            }else if(t.image.equals("/")) {
                Instruction item = new Instruction(InstructionName.DIV,0,0);
                middleCodeList.add(item);
            }else {
                Instruction item = new Instruction(InstructionName.MOD,0,0);
                middleCodeList.add(item);
            }
    }
  }

  static final public void Neg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS_TOKEN:
      jj_consume_token(MINUS_TOKEN);
                    numflag = !numflag;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    Factor();
  }

/** 因子 */
  static final public void Factor() throws ParseException {
    Token s;
    if (jj_2_8(2)) {
      DefinitionFunction();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN_TOKEN:
        jj_consume_token(LPAREN_TOKEN);
        Expression();
        jj_consume_token(RPAREN_TOKEN);
        break;
      case NUM_TOKEN:
        s = jj_consume_token(NUM_TOKEN);
        Instruction item=null;
        if(numflag)
        {
//            {System.out.println("+");}
            item = new Instruction(InstructionName.LIT,0,Integer.parseInt(s.image));
        }
        else
        {
//            System.out.println("-");
//            System.out.println(-1 * Integer.parseInt(s.image));
            item = new Instruction(InstructionName.LIT,0,-Integer.parseInt(s.image));
        }
        numflag=true;
        middleCodeList.add(item);
        break;
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_9(2)) {
          s = jj_consume_token(ID_TOKEN);
//        System.out.println("numflag "+numflag+s.image);
        getVariableByName(s,0);
        if(!numflag){
            item = new Instruction(InstructionName.NEG,0,0);
            middleCodeList.add(item);
            numflag = true;
        }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/** 自定义函数调用
*
*/
  static final public void DefinitionFunction() throws ParseException {
    Token t;
    //id '(' ')'
        t = jj_consume_token(ID_TOKEN);
    jj_consume_token(LPAREN_TOKEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_TOKEN:
    case NUM_TOKEN:
    case PLUS_TOKEN:
    case MINUS_TOKEN:
    case LPAREN_TOKEN:
      loadValue();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_TOKEN);
                 getFunctionByName(t);
  }

/** 函数调用值 */
  static final public void loadValue() throws ParseException {
    Token t;
    Expression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA_TOKEN:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA_TOKEN);
      Expression();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(LBRACE_TOKEN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RBRACE_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ELSE_TOKEN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(PRINTF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID_TOKEN)) return true;
    if (jj_scan_token(LPAREN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(VOID_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(FOR_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(IF_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(INT_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    if (jj_scan_token(LPAREN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(RETURN_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ID_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(COMMA_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(WHILE_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(EQUAL_TOKEN)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_scan_token(INT_TOKEN)) return true;
    if (jj_scan_token(ID_TOKEN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SampleTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x8000000,0x100000,0x8000000,0x600,0x200,0x100000,0x10276380,0x6080,0x270300,0x6000,0x40cc8000,0x40cc0000,0x40cc0000,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0xc00000,0xc00000,0xc00000,0x7000000,0x7000000,0x800000,0x40080000,0x40cc0000,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0xc0,0xc0,0x3c,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Sample(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Sample(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SampleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Sample(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SampleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Sample(SampleTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SampleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
